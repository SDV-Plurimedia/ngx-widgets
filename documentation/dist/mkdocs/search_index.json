{
    "docs": [
        {
            "location": "/index.html", 
            "text": "SDV\n Ng2 Widget est un pack de widget adapt\u00e9 pour bootstrap en angular2\n\n\nLes widgets g\u00e9n\u00e9riques sont d\u00e9finis dans le paquet \nsdv-ng2-widgets\n\n\nAutocomplete\n\n\n\n\nLe composant d'autocomplete doit \u00eatre appel\u00e9 de la fa\u00e7on suivante:\n\n\nautocomplete [config]='...' [data]='...' (valid)=\"function($event)\"\n/autocomplete\n\n\n\n\n\n\n[data]\n: \nArray\n - tableau contenant les donn\u00e9es \u00e0 traiter par l'autocomplete\n\n\n[config]\n: \nObject\n - permet la config du widget, doit contenir:\n\n\nfieldName\n: \nString|Array\n - nom du ou des attributs du tableau \ndata\n qui sont utilis\u00e9s \u00e0 l'affichage dans le champ\n\n\nfieldValue\n: \nString\n - nom de l'attribut du tableau \ndata\n qui fait office de valeur de retour par le widget (si vide, on renvoi l'objet complet)\n\n\nbegin\n: \nNumber\n - nombre de caract\u00e8res \u00e0 entrer dans le champ avant que l'autocomplete ne se lance\n\n\ndefaultValue\n: \nString\n - valeur par d\u00e9faut \u00e0 ins\u00e9rer dans l'input d'autocompletion\n\n\nplaceholder\n: \nString\n - Placeholder du champ\n\n\n\n\n\n\n(valid)\n: \nFunction\n - fonction appel\u00e9e lorsque le champ est valide\n\n\n\n\nBloc-Card\n\n\nBloc de contenu sous forme de carte\n\n\n\n\nbloc-card class=\"col-lg-4\" [data]=\"{type:'divers', title:'Titre de mon paragraphe', content:'Ici on peut raconter plein de chose'}\"\n/bloc-card\n\n\n\n\n\n\ntitle\n: pour changer le titre du bloc\n\n\ncontent\n: pour changer le contenu du bloc\n\n\ntype\n: peut prendre la valeur: paragraphe, image, divers, autre2, autre3 (ceci le fera changer de couleur)\n\n\n\n\nBreadCrumb ( Fil d'ariane )\n\n\nCe widget ne doit s'int\u00e9grer qu'une fois dans la page.\nPour son utilisation voir \u00e0 travers le service \nBreadCrumb\n\n\nButton 3D\n\n\nPermet de faire des boutons poussoir en 3d\n\n\n\n\nUtilisation :\n\n\nbutton3d [icon]=\"'check'\" [class]=\"'success'\" [size]=\"'btn-sm'\" (click)=\"afficheBootbox('alert')\" \n Valider\n/button3d\n\n\nbutton3d [icon]=\"'code-fork'\" [class]=\"'danger'\" (click)=\"afficheBootbox('alert')\" \n Pousser en prod\n/button3d\n\n\nbutton3d [icon]=\"'cloud'\" [class]=\"'primary'\" [size]=\"'btn-lg'\" (click)=\"afficheBootbox('alert')\" \n Envoyer dans le cloud\n/button3d\n\n\n\n\nChevron\n\n\nLe widget chevron permet de cacher facilement le contenu d'un bloc\n\n\n\n\n\n\nhidden\n : Input/Ouput: Etat ouvert/ferm\u00e9 du bloc li\u00e9 (boolean)\n\n\n\n\nExemple1: Utilisation avec une var locale et le display hidden (cach\u00e9 par la css) :\n\n\nh3\n\n  \nchevron [(hidden)]='contenu.hidden' class=\"pull-right\"\n/chevron\n\n  Titre\n\n/h3\n\n\ndiv #contenu\n\n  Mon contenu a cacher\n\n/div\n\n\n\n\nExemple2: Utilisation avec une var typescript et ngIf (cach\u00e9 par le dom/js):\n\n\npublic mavar: boolean = false;\n\n\nh3\n\n  \nchevron [(hidden)]='mavar' class=\"pull-right\"\n/chevron\n\n  Titre\n\n/h3\n\n\ndiv *ngIf='mavar'\n\n  Mon contenu \u00e0 cacher\n\n/div\n\n\n\n\nCKEditor\n\n\nLe widget ckeditor permet d'int\u00e9grer l'\u00e9diteur de texte simplement.\n\n\n\n\nUtilisation :\n\n\nckeditor [(content)]=\"article.chapeau\" [id]=\"'chapeau_text'\"\n          [rows]=\"4\" [disabled]=\"false\" [config]=\"config1\"\n/ckeditor\n\n\n\n\n\n\ncontent\n : Le texte contenu par l'\u00e9diteur, li\u00e9 dans les deux sens afin de  mettre \u00e0 jour automatiquement la variable dans le composant appelant\n\n\nid\n: Un identifiant unique pour l'\u00e9diteur.\n\n\nrow\n: Permet de d\u00e9finir la hauteur de l'\u00e9diteur.\n\n\ndisabled\n: Si il est \u00e0 true, le ckeditor est remplac\u00e9 par une div affichant juste le contenu.\n                S'il est pass\u00e9 \u00e0 false par la suite, le ckeditor apparaitra.\n\n\nconfig\n: La configuration de l'\u00e9diteur (choix des actions possibles ou non).\n\n\n\n\nExemple de conf, voir le fichier site/bo_spa/src/app/article/edit/edit.ts\n\n\nCorner button\n\n\nA documenter\n\n\nDatatable\n\n\n\n\nExemple de template:\n\n\nloader [condition]=\"data_tab\"\n\n  \ndatatable [data]=\"data_tab\" [structure]=\"structure\" [buttons]=\"buttons\" [parent_scope]=\"scope\"\n/datatable\n\n\n/loader\n`\n\n\n\nExemple de component:\n\n\npublic structure = [\n    { id: \"id\", label: \"ID\"},\n    { id: \"name\", label: \"Nom du champ\"}\n];\n\npublic buttons = [\n  {\n      text: 'Editer',\n      action: this.edit,\n      class: \"btn btn-warning\"\n  },\n  {\n      text: 'Supprimer',\n      action: this.confirmDelete,\n      class: \"btn btn-danger\"\n  }\n];\n//scope sur lequel appliquer les fonctions des boutons\npublic scope = this;\n\n//un exemple de donn\u00e9es\npublic data_tab = [{id: 1, name: \"Antoine\"}];\n\n\n\nDatePicker\n\n\nCe widget permet d'afficher un champ de texte qui fait appara\u00eetre un calendrier.\n\n\n\n\nUtilisation :\n\n\ndatepicker [(ngModel)]=\"date_publi\" view-format=\"DD/MM/YYYY\" model-format=\"YYYY-MM-DD\"\n            first-week-day-sunday=\"false\"\n/datepicker\n\n\n\n\n\n\nngModel\n: La valeur de le date.\n\n\nview-format\n: Le format de date tel qu'il sera affich\u00e9 dans le champ de texte.\n\n\nmodel-format\n: Le format de la date tel qu'il est dans la variable.\n\n\nfirst-week-day-sunday\n: Un bool\u00e9en permettant de pr\u00e9ciser pour l'affichage du calendrier si les semaines doivent commencer le dimanche (true) ou le lundi (false).\n\n\n\n\nDropDown\n\n\nA documenter\n\n\nGraph\n\n\nA documenter\n\n\nHierarchie List\n\n\nCe widget permet de faire une hierarchisation d'\u00e9l\u00e9ments en plusieurs volets qui s'ouvrent l'un \u00e0 c\u00f4t\u00e9 de l'autre.\n\n\nUtilisation:\n\n\nhierarchie-list #treeview [datas]=\"current_topics\" [params]=\"params\" \n/hierarchie-list\n\n\n\n\n\n\ndatas\n sont les donn\u00e9es \u00e0 mettre en forme dans le widget\n\n\nparams\n sert \u00e0 configurer l'arbre :\n\n\nname_column\n: le nom de l'attribut qui sera affich\u00e9\n\n\nprimary_key\n: l'attribut servant d'identifiant\n\n\nroot_id\n: l'identifiant de l'\u00e9l\u00e9ment servant de racine \u00e0 l'arbre\n\n\nscope\n: Le contexte d'appel pour les fonctions utilis\u00e9es dans les boutons et checkboxes\n\n\nbuttons\n: un tableau de boutons affich\u00e9s pour chaque \u00e9l\u00e9ment de l'arbre\n\n\nclass\n: Les classes \u00e0 affecter au bouton\n\n\ntext\n: Le texte (ou html) qui sera affich\u00e9 dans le bouton\n\n\naction\n: L'action \u00e0 effectuer au clic sur le bouton\n\n\n\n\n\n\n\n\n\n\n\n\nLoader\n\n\nLe widget loader permet de cacher facilement le contenu d'un bloc durant son chargement\n\n\n\n\n\n\ncondition\n : condition d'affichage de la roue de chargement, quand la condition est vrai on affiche le ng-content,mais tant que la condition est false on affiche le loader\n\n\ntype\n : Facultatif, Type de template d'affichage pour le widget, de base est une div, mais peut etre de type \nlist\n ou \npanel\n\n\n\n\nExemple:\n\n\nloader [condition]=\"!ready\" [type]=\"'panel'\"\n\n  Mon Contenu\n\n/loader\n\n\n\n\nMenu interne\n\n\nCe widget permet d'ajouter un second niveau de navigation, \u00e0 l'int\u00e9rieur d'un widge de page.\n\n\n\n\nIl se d\u00e9finit en lui fournissant au moins une liste d'item, exemple:\n\n\n    import {MenuItem, MenuItemBadge} from \nsdv-ng2-widgets\n;\n    ...\n    private menu_items = [\n      new MenuItem({\n        icon: \ninbox\n,\n        title: \nInbox\n,\n        badge: new MenuItemBadge({\n          class: \nsuccess\n,\n          number: 19\n        })\n      }),\n      new MenuItem({\n        icon: \nstar\n,\n        title: \nStarred\n,\n        badge: new MenuItemBadge({\n          class: \nwarning\n,\n          number: 2\n        })\n      }),\n      new MenuItem({\n        icon: \nstar\n,\n        title: \nMore\n,\n        subitems: [\n          new MenuItem({\n            title: \nSpam\n,\n            badge: new MenuItemBadge({\n              class: \nwarning\n,\n              number: 2\n            })\n          }),\n          new MenuItem({\n            title: \nTrash\n\n          })\n        ]\n      })\n    ];\n\n\n\n\net dans la template:\n\n\n    \nmenu_interne\n      [items]=\nmenu_items\n\n      [title]=\n'Gestion Multi-M\u00e9dia'\n\n      (select)=\nmenuClick($event)\n\n      [icon]=\n'plus'\n\n      [tooltip]=\n'Exporter vers un media'\n\n      (button)=\nnewMedia($event)\n\n      (toggle)=\nmenuToggle($event)\n\n    \n/menu_interne\n\n\n\n\n\n\n\n[items]\n: \nArray\n - Une entr\u00e9e du tableau correspond \u00e0 un element de la liste, on peut y ajouter des 'subitems' pour un niveau suppl\u00e9mentaire\n\n\n[title]\n: \nstring\n - Titre du menu\n\n\n(select)\n: \nEventEmitter\n - renvoie l'item selectionn\u00e9 lors d'un clic\n\n\n[icon]\n: \nstring\n - classe d'ic\u00f4ne du bouton de droite\n\n\n[tooltip]\n: \nstring\n - texte au survol du bouton de droite\n\n\n(button)\n: \nEventEmitter\n - renvoie true lors d'un click sur le bouton de droite\n\n\n(toggle)\n: \nEventEmitter\n - renvoie l'\u00e9tat (true= ouvert, false= ferm\u00e9) du menu lorsqu'on le ferme/ouvre\n\n\n\n\nPager\n\n\nUtilisation:\n\npager [pager]=\"pager\"\n/pager\n\n\n\n\npager\n: L'objet contenant la configuration du pager a appel\u00e9 en utilisant le constructeur du Pager\n\n\nscope\n: Le contexte d'appel du pager\n\n\nquantity\n: Le nombre d'\u00e9l\u00e9ments total\n\n\nper_page\n: Le nombre d'\u00e9l\u00e9ments par page\n\n\ndelta\n: Le nombre de boutons de num\u00e9ros de page affich\u00e9s\n\n\nactionCallback\n: La fonction \u00e0 appeler au clic sur  un des boutons du pager\n\n\n\n\n\n\n\n\nProgress Bar\n\n\nPermet d'afficher facilement une barre de progression qui change de couleur en fonction du taux d'avancement\n\n\nUtilisation:\n\n\n  \nprogress-bar [datas]=\"{\n        value : article.avancement,\n        min_value : 0,\n        max_value : 100\n    }\" [class]=\"'progress-bar-striped'\" class=\"col-md-8 control-label\"\n/progress-bar\n\n\n\n\n\n\ndatas\n: Un objet comprenant la valeur de la progress-bar, ainsi que ses valeurs minimum et maximum\n\n\nclass\n: Des classes particuli\u00e8res \u00e0 ajouter \u00e0 la progress-bar\n\n\n\n\nStatus Bar\n\n\nPermet de faire une notification de status ressemblant \u00e0 growl\n\n\n\n\nUtilisation :\n\n\nstatus-bar [icon]=\"'refresh'\" \n Mise \u00e0 jour disponible \n/status-bar\n\n\nstatus-bar [icon]=\"'folder-open-o'\" [class]=\"'info'\" \n Mise \u00e0 jour disponible \n/status-bar\n\n\nstatus-bar [icon]=\"'warning'\" [class]=\"'warning'\" \n Mise \u00e0 jour importante disponible \n/status-bar\n\n\nstatus-bar [icon]=\"'warning'\" [class]=\"'danger'\" \n Mise \u00e0 jour critique disponible \n/status-bar\n\n\n\n\nSwitch\n\n\nA documenter\n\n\nTabPane ( Onglets )\n\n\n\n\nLe composant doit figurer dans le template  de la fa\u00e7on suivante :\n\n\n \ntabpane\n\n     \ntab [tabtitle]=\"...\"\n\n       \nmon-autre-component\n/mon-autre-component\n\n     \n/tab\n\n     \ntab [tabtitle]=\"...\"\n\n       code html\n     \n/tab\n\n \n/tabpane\n\n\n\n\n\n\ntabpane\n sert \u00e0 encadrer la liste des onglets qui seront regroup\u00e9s\n\n\ntab\n sert \u00e0 d\u00e9finir un onglet en particulier\n\n\n[tabtitle]\n est le titre que portera l'onglet\n\n\nChaque balise tab peut contenir du html ou des composants Angular\n\n\n\n\n\n\n\n\nTouch Button\n\n\nPermet de cr\u00e9er un bouton flottant de style \"polymere\", contenant plusieurs autres boutons\n\n\n\n\nUtilisation:\n    \n\n       \n\n       \n\n      \n\n     \n\n\nTreeview\n\n\nLe treeview permet d'avoir un vue hierarchique d'\u00e9lement sous forme d'arbre d\u00e9pliable.\n\n\nUtilisation:\n\ntreeview [datas]=\"menu\" [params]=\"params\"\n/treeview\n\n\n\n\ndatas\n sont les donn\u00e9es \u00e0 mettre en forme dans l'arbre\n\n\nparams\n sert \u00e0 configurer l'arbre :\n\n\nname_column\n: le nom de l'attribut qui sera affich\u00e9\n\n\nprimary_key\n: l'attribut servant d'identifiant\n\n\nroot_id\n: l'identifiant de l'\u00e9l\u00e9ment servant de racine \u00e0 l'arbre\n\n\nscope\n: Le contexte d'appel pour les fonctions utilis\u00e9es dans les boutons et checkboxes\n\n\nbuttons\n: un tableau de boutons affich\u00e9s pour chaque \u00e9l\u00e9ment de l'arbre\n\n\ncheckbox\n: un objet permettant de configurer une checkbox devant chaque \u00e9l\u00e9ment de l'arbre :\n\n\ncolumn_value\n: La valeur utilis\u00e9e pour la checkbox\n\n\nchecked\n: un liste d'identifiant d'\u00e9l\u00e9ments d\u00e9j\u00e0 coch\u00e9s\n\n\naction_on_change\n: une fonction \u00e0 appeler quand on coche ou d\u00e9coche une checkbox\n\n\naction_validate\n: une fonction \u00e0 appeler quand on valide les cases coch\u00e9es\n\n\n\n\n\n\n\n\n\n\n\n\n# Wizard\n\n\na documenter", 
            "title": "Accueil"
        }, 
        {
            "location": "/index.html#autocomplete", 
            "text": "Le composant d'autocomplete doit \u00eatre appel\u00e9 de la fa\u00e7on suivante:  autocomplete [config]='...' [data]='...' (valid)=\"function($event)\" /autocomplete    [data] :  Array  - tableau contenant les donn\u00e9es \u00e0 traiter par l'autocomplete  [config] :  Object  - permet la config du widget, doit contenir:  fieldName :  String|Array  - nom du ou des attributs du tableau  data  qui sont utilis\u00e9s \u00e0 l'affichage dans le champ  fieldValue :  String  - nom de l'attribut du tableau  data  qui fait office de valeur de retour par le widget (si vide, on renvoi l'objet complet)  begin :  Number  - nombre de caract\u00e8res \u00e0 entrer dans le champ avant que l'autocomplete ne se lance  defaultValue :  String  - valeur par d\u00e9faut \u00e0 ins\u00e9rer dans l'input d'autocompletion  placeholder :  String  - Placeholder du champ    (valid) :  Function  - fonction appel\u00e9e lorsque le champ est valide", 
            "title": "Autocomplete"
        }, 
        {
            "location": "/index.html#bloc-card", 
            "text": "Bloc de contenu sous forme de carte   bloc-card class=\"col-lg-4\" [data]=\"{type:'divers', title:'Titre de mon paragraphe', content:'Ici on peut raconter plein de chose'}\" /bloc-card    title : pour changer le titre du bloc  content : pour changer le contenu du bloc  type : peut prendre la valeur: paragraphe, image, divers, autre2, autre3 (ceci le fera changer de couleur)", 
            "title": "Bloc-Card"
        }, 
        {
            "location": "/index.html#breadcrumb-fil-dariane", 
            "text": "Ce widget ne doit s'int\u00e9grer qu'une fois dans la page.\nPour son utilisation voir \u00e0 travers le service  BreadCrumb", 
            "title": "BreadCrumb ( Fil d'ariane )"
        }, 
        {
            "location": "/index.html#button-3d", 
            "text": "Permet de faire des boutons poussoir en 3d   Utilisation :  button3d [icon]=\"'check'\" [class]=\"'success'\" [size]=\"'btn-sm'\" (click)=\"afficheBootbox('alert')\"   Valider /button3d  button3d [icon]=\"'code-fork'\" [class]=\"'danger'\" (click)=\"afficheBootbox('alert')\"   Pousser en prod /button3d  button3d [icon]=\"'cloud'\" [class]=\"'primary'\" [size]=\"'btn-lg'\" (click)=\"afficheBootbox('alert')\"   Envoyer dans le cloud /button3d", 
            "title": "Button 3D"
        }, 
        {
            "location": "/index.html#chevron", 
            "text": "Le widget chevron permet de cacher facilement le contenu d'un bloc    hidden  : Input/Ouput: Etat ouvert/ferm\u00e9 du bloc li\u00e9 (boolean)   Exemple1: Utilisation avec une var locale et le display hidden (cach\u00e9 par la css) :  h3 \n   chevron [(hidden)]='contenu.hidden' class=\"pull-right\" /chevron \n  Titre /h3  div #contenu \n  Mon contenu a cacher /div   Exemple2: Utilisation avec une var typescript et ngIf (cach\u00e9 par le dom/js):  public mavar: boolean = false;  h3 \n   chevron [(hidden)]='mavar' class=\"pull-right\" /chevron \n  Titre /h3  div *ngIf='mavar' \n  Mon contenu \u00e0 cacher /div", 
            "title": "Chevron"
        }, 
        {
            "location": "/index.html#ckeditor", 
            "text": "Le widget ckeditor permet d'int\u00e9grer l'\u00e9diteur de texte simplement.   Utilisation :  ckeditor [(content)]=\"article.chapeau\" [id]=\"'chapeau_text'\"\n          [rows]=\"4\" [disabled]=\"false\" [config]=\"config1\" /ckeditor    content  : Le texte contenu par l'\u00e9diteur, li\u00e9 dans les deux sens afin de  mettre \u00e0 jour automatiquement la variable dans le composant appelant  id : Un identifiant unique pour l'\u00e9diteur.  row : Permet de d\u00e9finir la hauteur de l'\u00e9diteur.  disabled : Si il est \u00e0 true, le ckeditor est remplac\u00e9 par une div affichant juste le contenu.\n                S'il est pass\u00e9 \u00e0 false par la suite, le ckeditor apparaitra.  config : La configuration de l'\u00e9diteur (choix des actions possibles ou non).   Exemple de conf, voir le fichier site/bo_spa/src/app/article/edit/edit.ts", 
            "title": "CKEditor"
        }, 
        {
            "location": "/index.html#corner-button", 
            "text": "A documenter", 
            "title": "Corner button"
        }, 
        {
            "location": "/index.html#datatable", 
            "text": "Exemple de template:  loader [condition]=\"data_tab\" \n   datatable [data]=\"data_tab\" [structure]=\"structure\" [buttons]=\"buttons\" [parent_scope]=\"scope\" /datatable  /loader `  Exemple de component:  public structure = [\n    { id: \"id\", label: \"ID\"},\n    { id: \"name\", label: \"Nom du champ\"}\n];\n\npublic buttons = [\n  {\n      text: 'Editer',\n      action: this.edit,\n      class: \"btn btn-warning\"\n  },\n  {\n      text: 'Supprimer',\n      action: this.confirmDelete,\n      class: \"btn btn-danger\"\n  }\n];\n//scope sur lequel appliquer les fonctions des boutons\npublic scope = this;\n\n//un exemple de donn\u00e9es\npublic data_tab = [{id: 1, name: \"Antoine\"}];", 
            "title": "Datatable"
        }, 
        {
            "location": "/index.html#datepicker", 
            "text": "Ce widget permet d'afficher un champ de texte qui fait appara\u00eetre un calendrier.   Utilisation :  datepicker [(ngModel)]=\"date_publi\" view-format=\"DD/MM/YYYY\" model-format=\"YYYY-MM-DD\"\n            first-week-day-sunday=\"false\" /datepicker    ngModel : La valeur de le date.  view-format : Le format de date tel qu'il sera affich\u00e9 dans le champ de texte.  model-format : Le format de la date tel qu'il est dans la variable.  first-week-day-sunday : Un bool\u00e9en permettant de pr\u00e9ciser pour l'affichage du calendrier si les semaines doivent commencer le dimanche (true) ou le lundi (false).", 
            "title": "DatePicker"
        }, 
        {
            "location": "/index.html#dropdown", 
            "text": "A documenter", 
            "title": "DropDown"
        }, 
        {
            "location": "/index.html#graph", 
            "text": "A documenter", 
            "title": "Graph"
        }, 
        {
            "location": "/index.html#hierarchie-list", 
            "text": "Ce widget permet de faire une hierarchisation d'\u00e9l\u00e9ments en plusieurs volets qui s'ouvrent l'un \u00e0 c\u00f4t\u00e9 de l'autre.  Utilisation:  hierarchie-list #treeview [datas]=\"current_topics\" [params]=\"params\"  /hierarchie-list    datas  sont les donn\u00e9es \u00e0 mettre en forme dans le widget  params  sert \u00e0 configurer l'arbre :  name_column : le nom de l'attribut qui sera affich\u00e9  primary_key : l'attribut servant d'identifiant  root_id : l'identifiant de l'\u00e9l\u00e9ment servant de racine \u00e0 l'arbre  scope : Le contexte d'appel pour les fonctions utilis\u00e9es dans les boutons et checkboxes  buttons : un tableau de boutons affich\u00e9s pour chaque \u00e9l\u00e9ment de l'arbre  class : Les classes \u00e0 affecter au bouton  text : Le texte (ou html) qui sera affich\u00e9 dans le bouton  action : L'action \u00e0 effectuer au clic sur le bouton", 
            "title": "Hierarchie List"
        }, 
        {
            "location": "/index.html#loader", 
            "text": "Le widget loader permet de cacher facilement le contenu d'un bloc durant son chargement    condition  : condition d'affichage de la roue de chargement, quand la condition est vrai on affiche le ng-content,mais tant que la condition est false on affiche le loader  type  : Facultatif, Type de template d'affichage pour le widget, de base est une div, mais peut etre de type  list  ou  panel   Exemple:  loader [condition]=\"!ready\" [type]=\"'panel'\" \n  Mon Contenu /loader", 
            "title": "Loader"
        }, 
        {
            "location": "/index.html#menu-interne", 
            "text": "Ce widget permet d'ajouter un second niveau de navigation, \u00e0 l'int\u00e9rieur d'un widge de page.   Il se d\u00e9finit en lui fournissant au moins une liste d'item, exemple:      import {MenuItem, MenuItemBadge} from  sdv-ng2-widgets ;\n    ...\n    private menu_items = [\n      new MenuItem({\n        icon:  inbox ,\n        title:  Inbox ,\n        badge: new MenuItemBadge({\n          class:  success ,\n          number: 19\n        })\n      }),\n      new MenuItem({\n        icon:  star ,\n        title:  Starred ,\n        badge: new MenuItemBadge({\n          class:  warning ,\n          number: 2\n        })\n      }),\n      new MenuItem({\n        icon:  star ,\n        title:  More ,\n        subitems: [\n          new MenuItem({\n            title:  Spam ,\n            badge: new MenuItemBadge({\n              class:  warning ,\n              number: 2\n            })\n          }),\n          new MenuItem({\n            title:  Trash \n          })\n        ]\n      })\n    ];  et dans la template:       menu_interne\n      [items]= menu_items \n      [title]= 'Gestion Multi-M\u00e9dia' \n      (select)= menuClick($event) \n      [icon]= 'plus' \n      [tooltip]= 'Exporter vers un media' \n      (button)= newMedia($event) \n      (toggle)= menuToggle($event) \n     /menu_interne    [items] :  Array  - Une entr\u00e9e du tableau correspond \u00e0 un element de la liste, on peut y ajouter des 'subitems' pour un niveau suppl\u00e9mentaire  [title] :  string  - Titre du menu  (select) :  EventEmitter  - renvoie l'item selectionn\u00e9 lors d'un clic  [icon] :  string  - classe d'ic\u00f4ne du bouton de droite  [tooltip] :  string  - texte au survol du bouton de droite  (button) :  EventEmitter  - renvoie true lors d'un click sur le bouton de droite  (toggle) :  EventEmitter  - renvoie l'\u00e9tat (true= ouvert, false= ferm\u00e9) du menu lorsqu'on le ferme/ouvre", 
            "title": "Menu interne"
        }, 
        {
            "location": "/index.html#pager", 
            "text": "Utilisation: pager [pager]=\"pager\" /pager   pager : L'objet contenant la configuration du pager a appel\u00e9 en utilisant le constructeur du Pager  scope : Le contexte d'appel du pager  quantity : Le nombre d'\u00e9l\u00e9ments total  per_page : Le nombre d'\u00e9l\u00e9ments par page  delta : Le nombre de boutons de num\u00e9ros de page affich\u00e9s  actionCallback : La fonction \u00e0 appeler au clic sur  un des boutons du pager", 
            "title": "Pager"
        }, 
        {
            "location": "/index.html#progress-bar", 
            "text": "Permet d'afficher facilement une barre de progression qui change de couleur en fonction du taux d'avancement  Utilisation:     progress-bar [datas]=\"{\n        value : article.avancement,\n        min_value : 0,\n        max_value : 100\n    }\" [class]=\"'progress-bar-striped'\" class=\"col-md-8 control-label\" /progress-bar    datas : Un objet comprenant la valeur de la progress-bar, ainsi que ses valeurs minimum et maximum  class : Des classes particuli\u00e8res \u00e0 ajouter \u00e0 la progress-bar", 
            "title": "Progress Bar"
        }, 
        {
            "location": "/index.html#status-bar", 
            "text": "Permet de faire une notification de status ressemblant \u00e0 growl   Utilisation :  status-bar [icon]=\"'refresh'\"   Mise \u00e0 jour disponible  /status-bar  status-bar [icon]=\"'folder-open-o'\" [class]=\"'info'\"   Mise \u00e0 jour disponible  /status-bar  status-bar [icon]=\"'warning'\" [class]=\"'warning'\"   Mise \u00e0 jour importante disponible  /status-bar  status-bar [icon]=\"'warning'\" [class]=\"'danger'\"   Mise \u00e0 jour critique disponible  /status-bar", 
            "title": "Status Bar"
        }, 
        {
            "location": "/index.html#switch", 
            "text": "A documenter", 
            "title": "Switch"
        }, 
        {
            "location": "/index.html#tabpane-onglets", 
            "text": "Le composant doit figurer dans le template  de la fa\u00e7on suivante :    tabpane \n      tab [tabtitle]=\"...\" \n        mon-autre-component /mon-autre-component \n      /tab \n      tab [tabtitle]=\"...\" \n       code html\n      /tab \n  /tabpane    tabpane  sert \u00e0 encadrer la liste des onglets qui seront regroup\u00e9s  tab  sert \u00e0 d\u00e9finir un onglet en particulier  [tabtitle]  est le titre que portera l'onglet  Chaque balise tab peut contenir du html ou des composants Angular", 
            "title": "TabPane ( Onglets )"
        }, 
        {
            "location": "/index.html#touch-button", 
            "text": "Permet de cr\u00e9er un bouton flottant de style \"polymere\", contenant plusieurs autres boutons   Utilisation:", 
            "title": "Touch Button"
        }, 
        {
            "location": "/index.html#treeview", 
            "text": "Le treeview permet d'avoir un vue hierarchique d'\u00e9lement sous forme d'arbre d\u00e9pliable.  Utilisation: treeview [datas]=\"menu\" [params]=\"params\" /treeview   datas  sont les donn\u00e9es \u00e0 mettre en forme dans l'arbre  params  sert \u00e0 configurer l'arbre :  name_column : le nom de l'attribut qui sera affich\u00e9  primary_key : l'attribut servant d'identifiant  root_id : l'identifiant de l'\u00e9l\u00e9ment servant de racine \u00e0 l'arbre  scope : Le contexte d'appel pour les fonctions utilis\u00e9es dans les boutons et checkboxes  buttons : un tableau de boutons affich\u00e9s pour chaque \u00e9l\u00e9ment de l'arbre  checkbox : un objet permettant de configurer une checkbox devant chaque \u00e9l\u00e9ment de l'arbre :  column_value : La valeur utilis\u00e9e pour la checkbox  checked : un liste d'identifiant d'\u00e9l\u00e9ments d\u00e9j\u00e0 coch\u00e9s  action_on_change : une fonction \u00e0 appeler quand on coche ou d\u00e9coche une checkbox  action_validate : une fonction \u00e0 appeler quand on valide les cases coch\u00e9es       # Wizard  a documenter", 
            "title": "Treeview"
        }
    ]
}