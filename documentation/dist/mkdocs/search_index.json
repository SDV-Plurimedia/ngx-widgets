{
    "docs": [
        {
            "location": "/index.html", 
            "text": "SDV\n Ng2 Widget est un pack de widget adapt\u00e9 pour bootstrap en angular2\n\n\nLes widgets g\u00e9n\u00e9riques sont d\u00e9finis dans le paquet \nsdv-ng2-widgets\n\n\nAutocomplete\n\n\n\n\nLe composant d'autocomplete doit \u00eatre appel\u00e9 de la fa\u00e7on suivante:\n\n\nautocomplete [config]='...' [data]='...' (valid)=\"function($event)\"\n/autocomplete\n\n\n\n\n\n\n[data]\n: \nArray\n - tableau contenant les donn\u00e9es \u00e0 traiter par l'autocomplete\n\n\n[config]\n: \nObject\n - permet la config du widget, doit contenir:\n\n\nfieldDisplayed\n: \nString|Array\n - nom du ou des attributs du tableau \ndata\n qui sont utilis\u00e9s \u00e0 l'affichage dans le champ\n\n\nfieldSearch\n: \nString\n - nom de l'attribut du tableau \ndata\n dans lequel effectuer la recherche (si vide, on prend le fieldDisplayed)\n\n\nfieldValue\n: \nString\n - nom de l'attribut du tableau \ndata\n qui fait office de valeur de retour par le widget (si vide, on renvoi l'objet complet)\n\n\nfieldInsert\n: \nString\n - nom de l'attribut du tableau \ndata\n qui remplacera le placeholder apr\u00e8s un clic sur l'un des r\u00e9sultats (si vide, on insert le fieldDisplayed)\n\n\nfieldDefault\n: \nString\n - La cha\u00eene affich\u00e9e lorsque aucune valeur n'est s\u00e9lectionn\u00e9e. Vaut Aucun par d\u00e9fault\n\n\nbegin\n: \nNumber\n - nombre de caract\u00e8res \u00e0 entrer dans le champ avant que l'autocomplete ne se lance\n\n\ndefaultValue\n: \nString\n - valeur par d\u00e9faut \u00e0 ins\u00e9rer dans l'input d'autocompletion\n\n\nplaceholder\n: \nString\n - Placeholder du champ\n\n\nmodifyPlaceholder\n: \nBoolean\n - Si true, alors le placeholder prends la valeur du champs s\u00e9lectionn\u00e9. Vaut true par d\u00e9faut.\n\n\ndisplayItem\n: \nBoolean\n - Si true, alors on affiche les diff\u00e9rents \u00e9lements que l'on ajoute \u00e0 droite du placeholder. Vaut false par d\u00e9faut.\n\n\ndisplayItems\n: \nArray\n - Tableau qui contient les diff\u00e9rents \u00e9lements \u00e0 ajouter \u00e0 droite du placeholder.\n\n\ndisplayItemClass\n: \nString\n - Classe CSS pour les \u00e9lements \u00e0 afficher \u00e0 droite du placeholder.\n\n\n\n\n\n\n(valid)\n: \nFunction\n - fonction appel\u00e9e lorsque le champ est valid\u00e9 sur un resultat existant.\n\n\n(create)\n: \nFunction\n - fonction appel\u00e9e lorsqu'on fait \"ENTREE\" sur un texte inexistant.\n\n\n(delete)\n: \nFunction\n - fonction appel\u00e9e lors de la suppression d'un r\u00e9sultat.\n\n\n\n\nBigDatatable\n\n\nCe composant est une solution alternative au composant Datatable. Il permet de g\u00e9rer une grande quantit\u00e9 de donn\u00e9es.\nIl utilise le composant \nPager\n et le composant \nFiltre\n, cependant il peut fonctionner sans ceux-ci.\nIl est possible de le configurer de tel sorte qu'un filtre soit pr\u00e9sent en haut de page, qu'une pagination soit pr\u00e9sente en bas et/ou haut de page.\nPour un bon fonctionnement de ce composant, il est n\u00e9anmois conseill\u00e9 de disposer d'au moins une pagination.\n\n\nCe composant renvoie en valeur de output : (message), qui vaut success ou error selon si on a r\u00e9ussit ou non \u00e0 r\u00e9cup\u00e9rer les informations c\u00f4t\u00e9 serveur.\n\n\nLa configuration est la suivante :\n\n\n\n\n\n\nbigdata\n\n\n\n\n_service\n : Le service qui s'occupera d'aller chercher les donn\u00e9es sur le serveur.\n\n\n_service_method : La fonction qui est appell\u00e9e par le \n_service** pour r\u00e9cup\u00e9rer les donn\u00e9es.\n\n\nfilter_has_display_items\n - \nboolean\n - \ndefault = false\n : Si true, alors on peut changer le nombre d'\u00e9lement par page dans le filtre\n\n\ndisplay_items_name\n - \nstring\n - \ndefault = display_items\n : Nom du champs qui contient le nombre d'\u00e9lement par page dans le filtre (sa \nkey\n).\n\n\n\n\nis_filter\n - \nboolean\n - \ndefault = true\n : Si false, alors on a pas de filtre.\n\n\n\n\n\n\nfilter_config\n - \nArray\n : Correspond \u00e0 \nconfig\n de \nFiltre\n. Voir sa configuration.\n\n\n\n\n\n\ntr\n -Object** : Contient soit une propri\u00e9t\u00e9 :\n\n\n\n\nclass\n : La classe \u00e0 appliquer sur les tr\n\n\nfunction\n : Une fonction qui sera appliqu\u00e9e sur \nparent_scope\n qui renvera la classe \u00e0 appliquer sur le tr.\n\n\n\n\n\n\n\n\npagination_config\n - \nArray\n - \nFACULTATIF\n : Si non renseign\u00e9e, la pagination par d\u00e9faut sera appliqu\u00e9e.\n\n\n\n\npagination_top\n - \nboolean\n - \ndefault = false\n : Si true, alors on aura une pagination en haut de page.\n\n\npagination_bottom\n - \nboolean\n - \ndefault = true\n : Si true, alors on aura une pagination en bas de page.\n\n\npage\n - \nnumber\n - \ndefault = 1\n: La page courante.\n\n\nmax_page\n - \nnumber\n - \ndefault = 1\n : Le nombre de page qu'il y a en tous.\n\n\ndelta\n - \nnumber\n - \ndefault = 5\n : Le nombre de page pr\u00e9c\u00e9dent et suivant \npage\n que l'on vera \u00e0 l'\u00e9cran.\n\n\nitem_per_page\n - \nnumber\n - \ndefault = 10\n : Le nombre d'\u00e9lement que l'on veut afficher sur chaque page.\n\n\n\n\n\n\n\n\nbuttons\n - \nArray\n - \nFACULTATIF\n: Tableau de tableau contenant les boutons. Un tableau se compose de la fa\u00e7on suivante :\n\n\n\n\ntext\n - \nstring\n : Le texte qui sera dans le boutons, peut \u00eatre du HTML.\n\n\nclass\n - \nstring\n : La classe qui sera associ\u00e9 au bouton.\n\n\naction\n : La m\u00e9thode qui sera appell\u00e9e lors du clic sur le bouton. Sera appliqu\u00e9e sur \nparent_scope\n\n\n\n\n\n\n\n\n\n\n\n\nparent_scope\n : Le composant parent.\n\n\n\n\n\n\nstructure\n - \nArray\n : Correspond \u00e0 la structure des colonnes. Chaque colonne peut \u00eatre configur\u00e9e diff\u00e9rement,\nplusieurs types de colonne existent, pour les diff\u00e9rencier un attribut \nstate\n a \u00e9t\u00e9 mit en place. Cet attribut peut avoir plusieurs valeurs :\n\n\n\n\n1 est l'\u00e9tat \"normal\", ou le contenu sera affich\u00e9 tel quel dans la cellule.\n\n\n2 est l'\u00e9tat \"html\", ou le contenu est sous forme HTML.\n\n\n3 est l'\u00e9tat \"avanc\u00e9\", une fonction est d\u00e9clench\u00e9 lors du clic sur l'\u00e9lement.\n\n\n\n\nChaque colonne est mat\u00e9rialis\u00e9e par un tableau dans \nstructure\n, les propri\u00e9t\u00e9s communes pour ces tableaux sont les suivantes :\n\n \nid\n - \nstring\n : Correspond \u00e0 la propri\u00e9t\u00e9 de l'objet qui sera contenu dans la big-datatable.\n\n \nlabel\n - \nlabel\n : Correspond au titre de la colonne.\n\n \nsize\n - \nnumber\n - \nFACULTATIF\n : Correspond \u00e0 la taille en % de la colonne (attention seul les valeurs 1,2,3,5,7,15,20,25 sont mises en place).\n\n \nstate\n - \nnumber\n - \ndefault = 1\n : Correspond \u00e0 l'\u00e9tat de la cellule tel que d\u00e9cris ci-dessus.\n\n\nPropri\u00e9t\u00e9 suppl\u00e9mentaire selon l'\u00e9tat :\n* \nstate == 1 ||\u00a0state == 2\n : On peut lui passer une pipe en param\u00e8tre, pour ce faire :\n    * \npipe\n : C'est l'objet Pipe qu'on lui passe.\n    * \nparams\n : C'est les param\u00e8tres \u00e0 passer \u00e0 \npipe\n.\n    * \npipe_async\n - \nboolean\n : Permet de signifier qu'un pipe est asynchrones.\n    * \npipe_async_field\n- \nstring\n : Si le pipe asynchrone renvoie un objet, le champ pr\u00e9cis\u00e9 ici sera affich\u00e9.\n\n\n\n\nstate == 3\n : On peut lui passer une fonction qui se d\u00e9clenchera lors du clic sur lui et \u00e9galement split la value de la cellule.\n\n\nfunction_type\n - \nstring\n : Vaut soit 'normal', soit 'split', soit 'content'. Si split, on doit passer un separator en param\u00e8tre.\n\n\nseparator\n - \nstring\n - \nOBLIGATOIRE SI function_type == 'split'\n: Le s\u00e9parateur pour le split sur la valeur de la cellule.\n\n\nclass\n - \nstring\n : Une classe CSS \u00e0 appliquer sur le contenu de la cellule.\n\n\nfunction\n :\n\n\nSi function_type vaut 'split' ou 'normal', il s'agit de la fonction \u00e0 appliquer lors du clic sur le(s) \u00e9lement(s) de la cellule.\n\n\nSi function_type vaut 'content', il s'agit de la fonction \u00e0 appliquer \u00e0 l'affichage du contenu de la cellule.\n\n\n\n\n\n\n\n\n\n\n\n\nExemple de structure :\n\n\n    structure:                                              // La structure du tableau.\n    [\n        // Champs avec une pipe :\n        { id: \"url_source\",        label: \"URL Source\",    size: 15, pipe: new TruncateWithTooltipPipe, params: 50, state: 2},\n\n        // Champs \"normale\" :\n        { id: 'redirection_label', label: 'Redirection',   size: 11},\n\n        // Champs avec function :\n        { id: 'tags_list',         label: 'Tag(s)',        size: 10, function_type: 'split', separator:',', class:'tag_list hover', function: this.addFilterTag, state:3},\n    ],\n\n\n\n\n\nPour l'instancier :\n\n\nimport {BigDatatable} from 'sdv-ng2-widgets/_widgets/big-datatable/big-datatable.component';\n[...]\nthis.bigdata = new BigDatatable(this.config, this.structure, this.scope);\n\n\n\nLes donn\u00e9es qui sont post\u00e9es c\u00f4t\u00e9 serveur sont un tableau associatif contenant :\n\n\narray(\n    'filter' =\n  toutes les donn\u00e9es du filtre.\n    'pagination' =\n toute la pagination.\n);\n\n\nLe serveur doit imp\u00e9rativement renvoyer un tableau JSON sous cette forme :\n\n\narray('filter' =\n $filter['filter'],\n      'objects' =\n $res['shortcuts'],\n      'pagination' =\n $filter['pagination']\n      )\n\n\n\nBloc-Card\n\n\nBloc de contenu sous forme de carte\n\n\n\n\nbloc-card class=\"col-lg-4\" [data]=\"{type:'divers', title:'Titre de mon paragraphe', content:'Ici on peut raconter plein de chose'}\"\n/bloc-card\n\n\n\n\n\n\ntitle\n: pour changer le titre du bloc\n\n\ncontent\n: pour changer le contenu du bloc\n\n\ntype\n: peut prendre la valeur: paragraphe, image, divers, autre2, autre3 (ceci le fera changer de couleur)\n\n\n\n\nBreadCrumb ( Fil d'ariane )\n\n\nCe widget ne doit s'int\u00e9grer qu'une fois dans la page.\nPour son utilisation voir \u00e0 travers le service \nBreadCrumb\n\n\nButton 3D\n\n\nPermet de faire des boutons poussoir en 3d\n\n\n\n\nUtilisation :\n\n\nbutton3d [icon]=\"'check'\" [class]=\"'success'\" [size]=\"'btn-sm'\" (click)=\"afficheBootbox('alert')\" \n Valider\n/button3d\n\n\nbutton3d [icon]=\"'code-fork'\" [class]=\"'danger'\" (click)=\"afficheBootbox('alert')\" \n Pousser en prod\n/button3d\n\n\nbutton3d [icon]=\"'cloud'\" [class]=\"'primary'\" [size]=\"'btn-lg'\" (click)=\"afficheBootbox('alert')\" \n Envoyer dans le cloud\n/button3d\n\n\n\n\nChevron\n\n\nLe widget chevron permet de cacher facilement le contenu d'un bloc\n\n\n\n\n\n\nhidden\n : Input/Ouput: Etat ouvert/ferm\u00e9 du bloc li\u00e9 (boolean)\n\n\n\n\nExemple1: Utilisation avec une var locale et le display hidden (cach\u00e9 par la css) :\n\n\nh3\n\n  \nchevron [(hidden)]='contenu.hidden' class=\"pull-right\"\n/chevron\n\n  Titre\n\n/h3\n\n\ndiv #contenu\n\n  Mon contenu a cacher\n\n/div\n\n\n\n\nExemple2: Utilisation avec une var typescript et ngIf (cach\u00e9 par le dom/js):\n\n\npublic mavar: boolean = false;\n\n\nh3\n\n  \nchevron [(hidden)]='mavar' class=\"pull-right\"\n/chevron\n\n  Titre\n\n/h3\n\n\ndiv *ngIf='mavar'\n\n  Mon contenu \u00e0 cacher\n\n/div\n\n\n\n\nCKEditor\n\n\nLe widget ckeditor permet d'int\u00e9grer l'\u00e9diteur de texte simplement.\n\n\n\n\nUtilisation :\n\n\nckeditor [(content)]=\"article.chapeau\" [id]=\"'chapeau_text'\"\n          [rows]=\"4\" [disabled]=\"false\" [config]=\"config1\"\n/ckeditor\n\n\n\n\n\n\ncontent\n : Le texte contenu par l'\u00e9diteur, li\u00e9 dans les deux sens afin de  mettre \u00e0 jour automatiquement la variable dans le composant appelant\n\n\nid\n: Un identifiant unique pour l'\u00e9diteur.\n\n\nrow\n: Permet de d\u00e9finir la hauteur de l'\u00e9diteur.\n\n\ndisabled\n: Si il est \u00e0 true, le ckeditor est remplac\u00e9 par une div affichant juste le contenu.\n                S'il est pass\u00e9 \u00e0 false par la suite, le ckeditor apparaitra.\n\n\nconfig\n: La configuration de l'\u00e9diteur (choix des actions possibles ou non).\n\n\n\n\nExemple de conf, voir le fichier site/bo_spa/src/app/article/edit/edit.ts\n\n\nCorner button\n\n\nA documenter\n\n\nDatatable\n\n\n\n\nExemple de template:\n\n\nloader [condition]=\"data_tab\"\n\n  \ndatatable [data]=\"data_tab\" [structure]=\"structure\" [buttons]=\"buttons\" [parent_scope]=\"scope\"\n/datatable\n\n\n/loader\n`\n\n\n\nExemple de component:\n\n\npublic structure = [\n    { id: \"id\", label: \"ID\"},\n    { id: \"name\", label: \"Nom du champ\"}\n];\n\npublic buttons = [\n  {\n      text: 'Editer',\n      action: this.edit,\n      class: \"btn btn-warning\"\n  },\n  {\n      text: 'Supprimer',\n      action: this.confirmDelete,\n      class: \"btn btn-danger\"\n  }\n];\n//scope sur lequel appliquer les fonctions des boutons\npublic scope = this;\n\n//un exemple de donn\u00e9es\npublic data_tab = [{id: 1, name: \"Antoine\"}];\n\n\n\nIl est \u00e9galement possible de fournir du contenu HTML g\u00e9n\u00e9r\u00e9 dynamiquement, pour ce faire :\n\n\n\n\n\n\nLa d\u00e9finition de la structure est la suivante :\n\n\n{public structure = [\n  { id: \"id\", label: \"ID\"},\n  { id: \"liste_lapins\", label: \"Mes Lapins\", inputHTML: true}\n];\n\n\n\n\n\n\nEnsuite, dans mon model :\n\n\n\n\nAjouter la propri\u00e9t\u00e9 \"liste_lapin\".\n\n\nG\u00e9n\u00e9rer le HTML qui corresponds.\n\n\nL'affecter \u00e0 cette propri\u00e9t\u00e9.\n\n\n\n\n\n\n\n\ndans mon model\n\n\npublic lapins: Lapin[]; // Les diff\u00e9rents objets Lapin\n\n\n\nDans le constructeur du mode\n\n\nthis.lapins      = obj \n obj.lapins     || null;\n\npublic get liste_lapins() {\n    let ul = '\nul\n';\n    for(let lapin in this.lapins)\u00a0{\n        ul += '\nli\n' + lapin.name + '\n/li\n';\n    }\n    return ul + '\n/ul\n';\n}\n\n\n\nDatePicker\n\n\nCe widget permet d'afficher un champ de texte qui fait appara\u00eetre un calendrier.\n\n\n\n\nUtilisation :\n\n\ndatepicker [(ngModel)]=\"date_publi\" view-format=\"DD/MM/YYYY\" model-format=\"YYYY-MM-DD\"\n            first-week-day-sunday=\"false\"\n/datepicker\n\n\n\n\n\n\nngModel\n: La valeur de le date.\n\n\nview-format\n: Le format de date tel qu'il sera affich\u00e9 dans le champ de texte.\n\n\nmodel-format\n: Le format de la date tel qu'il est dans la variable.\n\n\ninit-date\n: Date \u00e0 placer dans le champ \u00e0 l'initialisation\n\n\nfirst-week-day-sunday\n: Un bool\u00e9en permettant de pr\u00e9ciser pour l'affichage du calendrier si les semaines doivent commencer le dimanche (true) ou le lundi (false).\n\n\nreset\n: Bool\u00e9en permettant d'afficher un bouton pour r\u00e9initialiser la valeur initiale du champ\n\n\ninit-empty\n : Un bool\u00e9en permettant de ne pas mettre la date courante par d\u00e9faut dans le champ si init-date est null\n\n\n\n\nDropDown\n\n\nA documenter\n\n\nFiltre\n\n\nCe composant permet de g\u00e9n\u00e9rer un filtre. Ce filtre poss\u00e8de deux \u00e9tats :\n * un \u00e9tat simple, o\u00f9 seulement un champs de recherche est pr\u00e9sent.\n * un \u00e9tat avanc\u00e9, o\u00f9 plusieurs champs de recherche sont pr\u00e9sent selon ce qui a \u00e9t\u00e9 configur\u00e9.\n\n\nLa configuration est la suivante :\n* \nconfig\n\n    * \nadvanced_mode\n - \nboolean\n - \ndefault = false\n : Si true, alors le filtre sera dans l'\u00e9tat \"Filtre avanc\u00e9\".\n    * \nglobal_search\n - \nstring\n - \ndefault = ''\n : Le texte qui est dans l'input de recherche lorsque le filtre es dans l'\u00e9tat \"Filtre simple\".\n    * \ncallback\n      : La fonction qui sera appell\u00e9e lors de la validation du filtre. Sera appliqu\u00e9e sur \nparent_scope\n\n    * \nparent_scope\n  : Le composant parent qui contient la m\u00e9thode \ncallback\n.\n    * \norder_by_column\n - \nstring\n - \ndefault = id\n : Le champs en base sur lequel l'order by sera appliqu\u00e9.\n    * \norder_by_type\n   - \nstring\n - \ndefault = ASC\n : Si l'order by est croissant ou d\u00e9croissant.\n    * \nconfig_column\n - \nArray\n : Tableau contenant la taille bootstrap des diff\u00e9rentes colonnes.\n                                              Par exemple [4,8] =\n On aura une colonne avec ce style \"col-lg-4\" et la deuxi\u00e8me aura \"col-lg-8\".\n                                              \nAttention le maxium des sommes des colonnes doit faire 12 !!!\n\n    * \nhide_search\n - \nboolean\n - \ndefault = false\n : Si true, alors le filtre de recherche globale sera cach\u00e9 lorsqu'on est en recherche avanc\u00e9.\n    * \nproperty\n - \nArray\n : Tableau contenant les diff\u00e9rentes propri\u00e9t\u00e9s sur lesquelles on peut filtrer.\n\n\nproperty\n est un tableau associatif, qui est form\u00e9 de la mani\u00e8re suivante :\n    * \nkey\n : \ndata (Array)\n : \nkey\n est le nom du champ tel qu'il l'est en BDD.\n\n\ndata\n est un tableau contenant les diff\u00e9rentes configurations pour le champs \nkey\n. La configuration diff\u00e8rent selon le type de champ.\nActuellement les diff\u00e9rents champs possible sont :\n * text\n * number\n * autocomplete\n * select\n * date\n * intervalle de date\n\n\nPour chacun de ces types, data doit contenir :\n * \nid\n - \nstring\n : C'est l'id du champs.\n * \nlabel\n - \nstring\n : C'est le label du champs.\n * \ntype\n - \nstring\n : C'est le type du champs. Ce type est un de ceux d\u00e9crit ci-dessus.\n * \nvalue\n - \n : La valeur par d\u00e9faut de ce champ. Peut \u00eatre une cha\u00eene, un nombre, un tableau....\n * \ncolumn\n - \nnumber\n : Le num\u00e9ro de la colonne dans lequel ce champ se trouvera.\n\n\nConfiguration de data suppl\u00e9mentaire pour \ndata.type ==\n:\n * \ntext\n : AUCUNE.\n\n\n\n\n\n\nnumber\n :\n\n\n\n\nmin\n - \nnumber\n - \nFACULTATIF\n : La valeur minimum possible pour ce champ.\n\n\nmax\n - \nnumber\n - \nFACULTATIF\n : La valeur maximal possible pour ce champ.\n\n\n\n\n\n\n\n\nautocomplete\n :\n\n\n\n\nconfig\n - \nArray\n =====\n Se r\u00e9f\u00e9rer \u00e0 la documation concernant le widget \"Autocomplete\".\n\n\ndelete\n : La m\u00e9thode qui sera d\u00e9lench\u00e9e lors de la suppression d'un \u00e9lement de l'autocomplete.\n               Cette m\u00e9thode sera appliqu\u00e9e sur \nparent_scope\n (celui du filtre).\n\n\nadd\n : La m\u00e9thode qui sera d\u00e9clench\u00e9e lors de l'ajout d'un \u00e9lement de l'autocomplete.\n            Cette m\u00e9thode sera appliqu\u00e9e sur \nparent_scope\n (celui du filtre).\n\n\ndata\n : Les donn\u00e9es qui seront fournies \u00e0 l'autocomplete.\n\n\n\n\n\n\n\n\nselect\n :\n\n\n\n\npropositions\n - \nArray\n - Tableau d'objet qui contient les diff\u00e9rents \u00e9lements \u00e0 ins\u00e9rer dans le select.\n                                 Ce tableau doit correspondre au format suivant : {\u00a0label: 'label', id : 'id'\u00a0}, o\u00f9 id est la value.\n\n\ndefault_label\n - \nstring\n - \nFACULTATIF\n : Le label de la proposition par d\u00e9faut.\n\n\ndefault_value\n - \nany\n    - \nFACULTATIF\n : La valeur de l'option par d\u00e9faut.\n\n\n\n\n\n\n\n\ndate\n : Aucune, par contre \nvalue\n doit \u00eatre une date au format \nYYYY-MM-DD\n !\n\n\n\n\n\n\ndate-intervale\n : Aucune, par contre \nvalue\n doit \u00eatre compos\u00e9 comme \u00e7a :\n\n\n\n\n{'min' : '2000-01-01', 'max': '2015-05-05'}\n o\u00f9 \nmin\n et \nmax\n sont au format \nYYYY-MM-DD\n.\n\n\n\n\n\n\n\n\n\n\nGraph\n\n\nA documenter\n\n\nHierarchie List\n\n\nCe widget permet de faire une hierarchisation d'\u00e9l\u00e9ments en plusieurs volets qui s'ouvrent l'un \u00e0 c\u00f4t\u00e9 de l'autre.\n\n\nUtilisation:\n\n\nhierarchie-list #treeview [datas]=\"current_topics\" [params]=\"params\" \n/hierarchie-list\n\n\n\n\n\n\ndatas\n sont les donn\u00e9es \u00e0 mettre en forme dans le widget\n\n\nparams\n sert \u00e0 configurer l'arbre :\n\n\nname_column\n: le nom de l'attribut qui sera affich\u00e9\n\n\nprimary_key\n: l'attribut servant d'identifiant\n\n\nroot_id\n: l'identifiant de l'\u00e9l\u00e9ment servant de racine \u00e0 l'arbre\n\n\nscope\n: Le contexte d'appel pour les fonctions utilis\u00e9es dans les boutons et checkboxes\n\n\nbuttons\n: un tableau de boutons affich\u00e9s pour chaque \u00e9l\u00e9ment de l'arbre\n\n\nclass\n: Les classes \u00e0 affecter au bouton\n\n\ntext\n: Le texte (ou html) qui sera affich\u00e9 dans le bouton\n\n\naction\n: L'action \u00e0 effectuer au clic sur le bouton\n\n\n\n\n\n\n\n\n\n\n\n\nLoader\n\n\nLe widget loader permet de cacher facilement le contenu d'un bloc durant son chargement\n\n\n\n\n\n\ncondition\n : condition d'affichage de la roue de chargement, quand la condition est vrai on affiche le ng-content,mais tant que la condition est false on affiche le loader\n\n\ntype\n : Facultatif, Type de template d'affichage pour le widget, de base est une div, mais peut etre de type \nlist\n ou \npanel\n\n\n\n\nExemple:\n\n\nloader [condition]=\"!ready\" [type]=\"'panel'\"\n\n  Mon Contenu\n\n/loader\n\n\n\n\nMenu interne\n\n\nCe widget permet d'ajouter un second niveau de navigation, \u00e0 l'int\u00e9rieur d'un widge de page.\n\n\n\n\nIl se d\u00e9finit en lui fournissant au moins une liste d'item, exemple:\n\n\n    import {MenuItem, MenuItemBadge} from \nsdv-ng2-widgets\n;\n    ...\n    private menu_items = [\n      new MenuItem({\n        icon: \ninbox\n,\n        title: \nInbox\n,\n        badge: new MenuItemBadge({\n          class: \nsuccess\n,\n          number: 19\n        })\n      }),\n      new MenuItem({\n        icon: \nstar\n,\n        title: \nStarred\n,\n        badge: new MenuItemBadge({\n          class: \nwarning\n,\n          number: 2\n        })\n      }),\n      new MenuItem({\n        icon: \nstar\n,\n        title: \nMore\n,\n        subitems: [\n          new MenuItem({\n            title: \nSpam\n,\n            badge: new MenuItemBadge({\n              class: \nwarning\n,\n              number: 2\n            })\n          }),\n          new MenuItem({\n            title: \nTrash\n\n          })\n        ]\n      })\n    ];\n\n\n\n\net dans la template:\n\n\n    \nmenu_interne\n      [items]=\nmenu_items\n\n      [title]=\n'Gestion Multi-M\u00e9dia'\n\n      (select)=\nmenuClick($event)\n\n      [icon]=\n'plus'\n\n      [tooltip]=\n'Exporter vers un media'\n\n      (button)=\nnewMedia($event)\n\n      (toggle)=\nmenuToggle($event)\n\n    \n/menu_interne\n\n\n\n\n\n\n\n[items]\n: \nArray\n - Une entr\u00e9e du tableau correspond \u00e0 un element de la liste, on peut y ajouter des 'subitems' pour un niveau suppl\u00e9mentaire\n\n\n[title]\n: \nstring\n - Titre du menu\n\n\n(select)\n: \nEventEmitter\n - renvoie l'item selectionn\u00e9 lors d'un clic\n\n\n[icon]\n: \nstring\n - classe d'ic\u00f4ne du bouton de droite\n\n\n[tooltip]\n: \nstring\n - texte au survol du bouton de droite\n\n\n(button)\n: \nEventEmitter\n - renvoie true lors d'un click sur le bouton de droite\n\n\n(toggle)\n: \nEventEmitter\n - renvoie l'\u00e9tat (true= ouvert, false= ferm\u00e9) du menu lorsqu'on le ferme/ouvre\n\n\n\n\nPager\n\n\nUtilisation:\n\npager [pager]=\"pager\"\n/pager\n\n\n\n\npager\n: L'objet contenant la configuration du pager a appel\u00e9 en utilisant le constructeur du Pager\n\n\nscope\n: Le contexte d'appel du pager\n\n\nquantity\n: Le nombre d'\u00e9l\u00e9ments total\n\n\nper_page\n: Le nombre d'\u00e9l\u00e9ments par page\n\n\ndelta\n: Le nombre de boutons de num\u00e9ros de page affich\u00e9s\n\n\nactionCallback\n: La fonction \u00e0 appeler au clic sur  un des boutons du pager\n\n\n\n\n\n\n\n\nPagination\n\n\nLa pagination permet de g\u00e9n\u00e9rer une pagination.\n * \nitem_per_page\n - \nnumber\n - \ndefault = 10\n : Le nombre d'\u00e9lement que l'on veut afficher sur chaque page.\n * \npage\n - \nnumber\n - \ndefault = 1\n : La page courante.\n * \nmax_page\n - \nnumber\n - \ndefault = 1\n : Le nombre de page qu'il y a en tous.\n * \ncallback\n : La fonction \u00e0 appeller en cas de changement de page, cette fonction sera appell\u00e9e sur \nparent_scope\n.\n * \nparent_scope\n : L'\u00e9lement sur lequel la fonction \ncallback\n va s'appliquer.\n * \ndelta\n - \nnumber\n - \ndefault = 5\n : Le nombre de page pr\u00e9c\u00e9dent et suivant \npage\n que l'on vera \u00e0 l'\u00e9cran.\n\n\n\n\nExemple d'appel dans un template :\n\n\npagination [max_page]=\"max_page\"\n            [item_per_page]=\"item_per_page\"\n            [page]=\"page\"\n            [delta]=\"delta\"\n            [parent_scope]=\"scope\"\n            [callback]=\"callback\"\n\n\n/pagination\n\n\n\n\nProgress Bar\n\n\nPermet d'afficher facilement une barre de progression qui change de couleur en fonction du taux d'avancement\n\n\nUtilisation:\n\n\n  \nprogress-bar [datas]=\"{\n        value : article.avancement,\n        min_value : 0,\n        max_value : 100\n    }\" [class]=\"'progress-bar-striped'\" class=\"col-md-8 control-label\"\n/progress-bar\n\n\n\n\n\n\ndatas\n: Un objet comprenant la valeur de la progress-bar, ainsi que ses valeurs minimum et maximum\n\n\nclass\n: Des classes particuli\u00e8res \u00e0 ajouter \u00e0 la progress-bar\n\n\n\n\nStatus Bar\n\n\nPermet de faire une notification de status ressemblant \u00e0 growl\n\n\n\n\nUtilisation :\n\n\nstatus-bar [icon]=\"'refresh'\" \n Mise \u00e0 jour disponible \n/status-bar\n\n\nstatus-bar [icon]=\"'folder-open-o'\" [class]=\"'info'\" \n Mise \u00e0 jour disponible \n/status-bar\n\n\nstatus-bar [icon]=\"'warning'\" [class]=\"'warning'\" \n Mise \u00e0 jour importante disponible \n/status-bar\n\n\nstatus-bar [icon]=\"'warning'\" [class]=\"'danger'\" \n Mise \u00e0 jour critique disponible \n/status-bar\n\n\n\n\nSwitch\n\n\nA documenter\n\n\nTabPane ( Onglets )\n\n\n\n\nLe composant doit figurer dans le template  de la fa\u00e7on suivante :\n\n\n \ntabpane\n\n     \ntab [tabtitle]=\"...\"\n\n       \nmon-autre-component\n/mon-autre-component\n\n     \n/tab\n\n     \ntab [tabtitle]=\"...\"\n\n       code html\n     \n/tab\n\n \n/tabpane\n\n\n\n\n\n\ntabpane\n sert \u00e0 encadrer la liste des onglets qui seront regroup\u00e9s\n\n\ntab\n sert \u00e0 d\u00e9finir un onglet en particulier\n\n\n[tabtitle]\n est le titre que portera l'onglet\n\n\nChaque balise tab peut contenir du html ou des composants Angular\n\n\n\n\n\n\n\n\nTouch Button\n\n\nPermet de cr\u00e9er un bouton flottant de style \"polymere\", contenant plusieurs autres boutons\n\n\n\n\nUtilisation:\n\n\n\n\n\n\n\n\n\n\n\nTreeview\n\n\nLe treeview permet d'avoir un vue hierarchique d'\u00e9lement sous forme d'arbre d\u00e9pliable.\n\n\nUtilisation:\n\ntreeview [datas]=\"menu\" [params]=\"params\"\n/treeview\n\n\n\n\ndatas\n sont les donn\u00e9es \u00e0 mettre en forme dans l'arbre\n\n\nparams\n sert \u00e0 configurer l'arbre :\n\n\nname_column\n: le nom de l'attribut qui sera affich\u00e9\n\n\nprimary_key\n: l'attribut servant d'identifiant\n\n\nroot_id\n: l'identifiant de l'\u00e9l\u00e9ment servant de racine \u00e0 l'arbre\n\n\nscope\n: Le contexte d'appel pour les fonctions utilis\u00e9es dans les boutons et checkboxes\n\n\nbuttons\n: un tableau de boutons affich\u00e9s pour chaque \u00e9l\u00e9ment de l'arbre\n\n\ncheckbox\n: un objet permettant de configurer une checkbox devant chaque \u00e9l\u00e9ment de l'arbre :\n\n\ncolumn_value\n: La valeur utilis\u00e9e pour la checkbox\n\n\nchecked\n: un liste d'identifiant d'\u00e9l\u00e9ments d\u00e9j\u00e0 coch\u00e9s\n\n\naction_on_change\n: une fonction \u00e0 appeler quand on coche ou d\u00e9coche une checkbox\n\n\naction_validate\n: une fonction \u00e0 appeler quand on valide les cases coch\u00e9es\n\n\n\n\n\n\n\n\n\n\n\n\nWizard\n\n\na documenter", 
            "title": "Accueil"
        }, 
        {
            "location": "/index.html#autocomplete", 
            "text": "Le composant d'autocomplete doit \u00eatre appel\u00e9 de la fa\u00e7on suivante:  autocomplete [config]='...' [data]='...' (valid)=\"function($event)\" /autocomplete    [data] :  Array  - tableau contenant les donn\u00e9es \u00e0 traiter par l'autocomplete  [config] :  Object  - permet la config du widget, doit contenir:  fieldDisplayed :  String|Array  - nom du ou des attributs du tableau  data  qui sont utilis\u00e9s \u00e0 l'affichage dans le champ  fieldSearch :  String  - nom de l'attribut du tableau  data  dans lequel effectuer la recherche (si vide, on prend le fieldDisplayed)  fieldValue :  String  - nom de l'attribut du tableau  data  qui fait office de valeur de retour par le widget (si vide, on renvoi l'objet complet)  fieldInsert :  String  - nom de l'attribut du tableau  data  qui remplacera le placeholder apr\u00e8s un clic sur l'un des r\u00e9sultats (si vide, on insert le fieldDisplayed)  fieldDefault :  String  - La cha\u00eene affich\u00e9e lorsque aucune valeur n'est s\u00e9lectionn\u00e9e. Vaut Aucun par d\u00e9fault  begin :  Number  - nombre de caract\u00e8res \u00e0 entrer dans le champ avant que l'autocomplete ne se lance  defaultValue :  String  - valeur par d\u00e9faut \u00e0 ins\u00e9rer dans l'input d'autocompletion  placeholder :  String  - Placeholder du champ  modifyPlaceholder :  Boolean  - Si true, alors le placeholder prends la valeur du champs s\u00e9lectionn\u00e9. Vaut true par d\u00e9faut.  displayItem :  Boolean  - Si true, alors on affiche les diff\u00e9rents \u00e9lements que l'on ajoute \u00e0 droite du placeholder. Vaut false par d\u00e9faut.  displayItems :  Array  - Tableau qui contient les diff\u00e9rents \u00e9lements \u00e0 ajouter \u00e0 droite du placeholder.  displayItemClass :  String  - Classe CSS pour les \u00e9lements \u00e0 afficher \u00e0 droite du placeholder.    (valid) :  Function  - fonction appel\u00e9e lorsque le champ est valid\u00e9 sur un resultat existant.  (create) :  Function  - fonction appel\u00e9e lorsqu'on fait \"ENTREE\" sur un texte inexistant.  (delete) :  Function  - fonction appel\u00e9e lors de la suppression d'un r\u00e9sultat.", 
            "title": "Autocomplete"
        }, 
        {
            "location": "/index.html#bigdatatable", 
            "text": "Ce composant est une solution alternative au composant Datatable. Il permet de g\u00e9rer une grande quantit\u00e9 de donn\u00e9es.\nIl utilise le composant  Pager  et le composant  Filtre , cependant il peut fonctionner sans ceux-ci.\nIl est possible de le configurer de tel sorte qu'un filtre soit pr\u00e9sent en haut de page, qu'une pagination soit pr\u00e9sente en bas et/ou haut de page.\nPour un bon fonctionnement de ce composant, il est n\u00e9anmois conseill\u00e9 de disposer d'au moins une pagination.  Ce composant renvoie en valeur de output : (message), qui vaut success ou error selon si on a r\u00e9ussit ou non \u00e0 r\u00e9cup\u00e9rer les informations c\u00f4t\u00e9 serveur.  La configuration est la suivante :    bigdata   _service  : Le service qui s'occupera d'aller chercher les donn\u00e9es sur le serveur.  _service_method : La fonction qui est appell\u00e9e par le  _service** pour r\u00e9cup\u00e9rer les donn\u00e9es.  filter_has_display_items  -  boolean  -  default = false  : Si true, alors on peut changer le nombre d'\u00e9lement par page dans le filtre  display_items_name  -  string  -  default = display_items  : Nom du champs qui contient le nombre d'\u00e9lement par page dans le filtre (sa  key ).   is_filter  -  boolean  -  default = true  : Si false, alors on a pas de filtre.    filter_config  -  Array  : Correspond \u00e0  config  de  Filtre . Voir sa configuration.    tr  -Object** : Contient soit une propri\u00e9t\u00e9 :   class  : La classe \u00e0 appliquer sur les tr  function  : Une fonction qui sera appliqu\u00e9e sur  parent_scope  qui renvera la classe \u00e0 appliquer sur le tr.     pagination_config  -  Array  -  FACULTATIF  : Si non renseign\u00e9e, la pagination par d\u00e9faut sera appliqu\u00e9e.   pagination_top  -  boolean  -  default = false  : Si true, alors on aura une pagination en haut de page.  pagination_bottom  -  boolean  -  default = true  : Si true, alors on aura une pagination en bas de page.  page  -  number  -  default = 1 : La page courante.  max_page  -  number  -  default = 1  : Le nombre de page qu'il y a en tous.  delta  -  number  -  default = 5  : Le nombre de page pr\u00e9c\u00e9dent et suivant  page  que l'on vera \u00e0 l'\u00e9cran.  item_per_page  -  number  -  default = 10  : Le nombre d'\u00e9lement que l'on veut afficher sur chaque page.     buttons  -  Array  -  FACULTATIF : Tableau de tableau contenant les boutons. Un tableau se compose de la fa\u00e7on suivante :   text  -  string  : Le texte qui sera dans le boutons, peut \u00eatre du HTML.  class  -  string  : La classe qui sera associ\u00e9 au bouton.  action  : La m\u00e9thode qui sera appell\u00e9e lors du clic sur le bouton. Sera appliqu\u00e9e sur  parent_scope       parent_scope  : Le composant parent.    structure  -  Array  : Correspond \u00e0 la structure des colonnes. Chaque colonne peut \u00eatre configur\u00e9e diff\u00e9rement,\nplusieurs types de colonne existent, pour les diff\u00e9rencier un attribut  state  a \u00e9t\u00e9 mit en place. Cet attribut peut avoir plusieurs valeurs :   1 est l'\u00e9tat \"normal\", ou le contenu sera affich\u00e9 tel quel dans la cellule.  2 est l'\u00e9tat \"html\", ou le contenu est sous forme HTML.  3 est l'\u00e9tat \"avanc\u00e9\", une fonction est d\u00e9clench\u00e9 lors du clic sur l'\u00e9lement.   Chaque colonne est mat\u00e9rialis\u00e9e par un tableau dans  structure , les propri\u00e9t\u00e9s communes pour ces tableaux sont les suivantes :   id  -  string  : Correspond \u00e0 la propri\u00e9t\u00e9 de l'objet qui sera contenu dans la big-datatable.   label  -  label  : Correspond au titre de la colonne.   size  -  number  -  FACULTATIF  : Correspond \u00e0 la taille en % de la colonne (attention seul les valeurs 1,2,3,5,7,15,20,25 sont mises en place).   state  -  number  -  default = 1  : Correspond \u00e0 l'\u00e9tat de la cellule tel que d\u00e9cris ci-dessus.  Propri\u00e9t\u00e9 suppl\u00e9mentaire selon l'\u00e9tat :\n*  state == 1 ||\u00a0state == 2  : On peut lui passer une pipe en param\u00e8tre, pour ce faire :\n    *  pipe  : C'est l'objet Pipe qu'on lui passe.\n    *  params  : C'est les param\u00e8tres \u00e0 passer \u00e0  pipe .\n    *  pipe_async  -  boolean  : Permet de signifier qu'un pipe est asynchrones.\n    *  pipe_async_field -  string  : Si le pipe asynchrone renvoie un objet, le champ pr\u00e9cis\u00e9 ici sera affich\u00e9.   state == 3  : On peut lui passer une fonction qui se d\u00e9clenchera lors du clic sur lui et \u00e9galement split la value de la cellule.  function_type  -  string  : Vaut soit 'normal', soit 'split', soit 'content'. Si split, on doit passer un separator en param\u00e8tre.  separator  -  string  -  OBLIGATOIRE SI function_type == 'split' : Le s\u00e9parateur pour le split sur la valeur de la cellule.  class  -  string  : Une classe CSS \u00e0 appliquer sur le contenu de la cellule.  function  :  Si function_type vaut 'split' ou 'normal', il s'agit de la fonction \u00e0 appliquer lors du clic sur le(s) \u00e9lement(s) de la cellule.  Si function_type vaut 'content', il s'agit de la fonction \u00e0 appliquer \u00e0 l'affichage du contenu de la cellule.       Exemple de structure :      structure:                                              // La structure du tableau.\n    [\n        // Champs avec une pipe :\n        { id: \"url_source\",        label: \"URL Source\",    size: 15, pipe: new TruncateWithTooltipPipe, params: 50, state: 2},\n\n        // Champs \"normale\" :\n        { id: 'redirection_label', label: 'Redirection',   size: 11},\n\n        // Champs avec function :\n        { id: 'tags_list',         label: 'Tag(s)',        size: 10, function_type: 'split', separator:',', class:'tag_list hover', function: this.addFilterTag, state:3},\n    ],   Pour l'instancier :  import {BigDatatable} from 'sdv-ng2-widgets/_widgets/big-datatable/big-datatable.component';\n[...]\nthis.bigdata = new BigDatatable(this.config, this.structure, this.scope);  Les donn\u00e9es qui sont post\u00e9es c\u00f4t\u00e9 serveur sont un tableau associatif contenant :  array(\n    'filter' =   toutes les donn\u00e9es du filtre.\n    'pagination' =  toute la pagination.\n);  Le serveur doit imp\u00e9rativement renvoyer un tableau JSON sous cette forme :  array('filter' =  $filter['filter'],\n      'objects' =  $res['shortcuts'],\n      'pagination' =  $filter['pagination']\n      )", 
            "title": "BigDatatable"
        }, 
        {
            "location": "/index.html#bloc-card", 
            "text": "Bloc de contenu sous forme de carte   bloc-card class=\"col-lg-4\" [data]=\"{type:'divers', title:'Titre de mon paragraphe', content:'Ici on peut raconter plein de chose'}\" /bloc-card    title : pour changer le titre du bloc  content : pour changer le contenu du bloc  type : peut prendre la valeur: paragraphe, image, divers, autre2, autre3 (ceci le fera changer de couleur)", 
            "title": "Bloc-Card"
        }, 
        {
            "location": "/index.html#breadcrumb-fil-dariane", 
            "text": "Ce widget ne doit s'int\u00e9grer qu'une fois dans la page.\nPour son utilisation voir \u00e0 travers le service  BreadCrumb", 
            "title": "BreadCrumb ( Fil d'ariane )"
        }, 
        {
            "location": "/index.html#button-3d", 
            "text": "Permet de faire des boutons poussoir en 3d   Utilisation :  button3d [icon]=\"'check'\" [class]=\"'success'\" [size]=\"'btn-sm'\" (click)=\"afficheBootbox('alert')\"   Valider /button3d  button3d [icon]=\"'code-fork'\" [class]=\"'danger'\" (click)=\"afficheBootbox('alert')\"   Pousser en prod /button3d  button3d [icon]=\"'cloud'\" [class]=\"'primary'\" [size]=\"'btn-lg'\" (click)=\"afficheBootbox('alert')\"   Envoyer dans le cloud /button3d", 
            "title": "Button 3D"
        }, 
        {
            "location": "/index.html#chevron", 
            "text": "Le widget chevron permet de cacher facilement le contenu d'un bloc    hidden  : Input/Ouput: Etat ouvert/ferm\u00e9 du bloc li\u00e9 (boolean)   Exemple1: Utilisation avec une var locale et le display hidden (cach\u00e9 par la css) :  h3 \n   chevron [(hidden)]='contenu.hidden' class=\"pull-right\" /chevron \n  Titre /h3  div #contenu \n  Mon contenu a cacher /div   Exemple2: Utilisation avec une var typescript et ngIf (cach\u00e9 par le dom/js):  public mavar: boolean = false;  h3 \n   chevron [(hidden)]='mavar' class=\"pull-right\" /chevron \n  Titre /h3  div *ngIf='mavar' \n  Mon contenu \u00e0 cacher /div", 
            "title": "Chevron"
        }, 
        {
            "location": "/index.html#ckeditor", 
            "text": "Le widget ckeditor permet d'int\u00e9grer l'\u00e9diteur de texte simplement.   Utilisation :  ckeditor [(content)]=\"article.chapeau\" [id]=\"'chapeau_text'\"\n          [rows]=\"4\" [disabled]=\"false\" [config]=\"config1\" /ckeditor    content  : Le texte contenu par l'\u00e9diteur, li\u00e9 dans les deux sens afin de  mettre \u00e0 jour automatiquement la variable dans le composant appelant  id : Un identifiant unique pour l'\u00e9diteur.  row : Permet de d\u00e9finir la hauteur de l'\u00e9diteur.  disabled : Si il est \u00e0 true, le ckeditor est remplac\u00e9 par une div affichant juste le contenu.\n                S'il est pass\u00e9 \u00e0 false par la suite, le ckeditor apparaitra.  config : La configuration de l'\u00e9diteur (choix des actions possibles ou non).   Exemple de conf, voir le fichier site/bo_spa/src/app/article/edit/edit.ts", 
            "title": "CKEditor"
        }, 
        {
            "location": "/index.html#corner-button", 
            "text": "A documenter", 
            "title": "Corner button"
        }, 
        {
            "location": "/index.html#datatable", 
            "text": "Exemple de template:  loader [condition]=\"data_tab\" \n   datatable [data]=\"data_tab\" [structure]=\"structure\" [buttons]=\"buttons\" [parent_scope]=\"scope\" /datatable  /loader `  Exemple de component:  public structure = [\n    { id: \"id\", label: \"ID\"},\n    { id: \"name\", label: \"Nom du champ\"}\n];\n\npublic buttons = [\n  {\n      text: 'Editer',\n      action: this.edit,\n      class: \"btn btn-warning\"\n  },\n  {\n      text: 'Supprimer',\n      action: this.confirmDelete,\n      class: \"btn btn-danger\"\n  }\n];\n//scope sur lequel appliquer les fonctions des boutons\npublic scope = this;\n\n//un exemple de donn\u00e9es\npublic data_tab = [{id: 1, name: \"Antoine\"}];  Il est \u00e9galement possible de fournir du contenu HTML g\u00e9n\u00e9r\u00e9 dynamiquement, pour ce faire :    La d\u00e9finition de la structure est la suivante :  {public structure = [\n  { id: \"id\", label: \"ID\"},\n  { id: \"liste_lapins\", label: \"Mes Lapins\", inputHTML: true}\n];    Ensuite, dans mon model :   Ajouter la propri\u00e9t\u00e9 \"liste_lapin\".  G\u00e9n\u00e9rer le HTML qui corresponds.  L'affecter \u00e0 cette propri\u00e9t\u00e9.", 
            "title": "Datatable"
        }, 
        {
            "location": "/index.html#dans-mon-model", 
            "text": "public lapins: Lapin[]; // Les diff\u00e9rents objets Lapin", 
            "title": "dans mon model"
        }, 
        {
            "location": "/index.html#dans-le-constructeur-du-mode", 
            "text": "this.lapins      = obj   obj.lapins     || null;\n\npublic get liste_lapins() {\n    let ul = ' ul ';\n    for(let lapin in this.lapins)\u00a0{\n        ul += ' li ' + lapin.name + ' /li ';\n    }\n    return ul + ' /ul ';\n}", 
            "title": "Dans le constructeur du mode"
        }, 
        {
            "location": "/index.html#datepicker", 
            "text": "Ce widget permet d'afficher un champ de texte qui fait appara\u00eetre un calendrier.   Utilisation :  datepicker [(ngModel)]=\"date_publi\" view-format=\"DD/MM/YYYY\" model-format=\"YYYY-MM-DD\"\n            first-week-day-sunday=\"false\" /datepicker    ngModel : La valeur de le date.  view-format : Le format de date tel qu'il sera affich\u00e9 dans le champ de texte.  model-format : Le format de la date tel qu'il est dans la variable.  init-date : Date \u00e0 placer dans le champ \u00e0 l'initialisation  first-week-day-sunday : Un bool\u00e9en permettant de pr\u00e9ciser pour l'affichage du calendrier si les semaines doivent commencer le dimanche (true) ou le lundi (false).  reset : Bool\u00e9en permettant d'afficher un bouton pour r\u00e9initialiser la valeur initiale du champ  init-empty  : Un bool\u00e9en permettant de ne pas mettre la date courante par d\u00e9faut dans le champ si init-date est null", 
            "title": "DatePicker"
        }, 
        {
            "location": "/index.html#dropdown", 
            "text": "A documenter", 
            "title": "DropDown"
        }, 
        {
            "location": "/index.html#filtre", 
            "text": "Ce composant permet de g\u00e9n\u00e9rer un filtre. Ce filtre poss\u00e8de deux \u00e9tats :\n * un \u00e9tat simple, o\u00f9 seulement un champs de recherche est pr\u00e9sent.\n * un \u00e9tat avanc\u00e9, o\u00f9 plusieurs champs de recherche sont pr\u00e9sent selon ce qui a \u00e9t\u00e9 configur\u00e9.  La configuration est la suivante :\n*  config \n    *  advanced_mode  -  boolean  -  default = false  : Si true, alors le filtre sera dans l'\u00e9tat \"Filtre avanc\u00e9\".\n    *  global_search  -  string  -  default = ''  : Le texte qui est dans l'input de recherche lorsque le filtre es dans l'\u00e9tat \"Filtre simple\".\n    *  callback       : La fonction qui sera appell\u00e9e lors de la validation du filtre. Sera appliqu\u00e9e sur  parent_scope \n    *  parent_scope   : Le composant parent qui contient la m\u00e9thode  callback .\n    *  order_by_column  -  string  -  default = id  : Le champs en base sur lequel l'order by sera appliqu\u00e9.\n    *  order_by_type    -  string  -  default = ASC  : Si l'order by est croissant ou d\u00e9croissant.\n    *  config_column  -  Array  : Tableau contenant la taille bootstrap des diff\u00e9rentes colonnes.\n                                              Par exemple [4,8] =  On aura une colonne avec ce style \"col-lg-4\" et la deuxi\u00e8me aura \"col-lg-8\".\n                                               Attention le maxium des sommes des colonnes doit faire 12 !!! \n    *  hide_search  -  boolean  -  default = false  : Si true, alors le filtre de recherche globale sera cach\u00e9 lorsqu'on est en recherche avanc\u00e9.\n    *  property  -  Array  : Tableau contenant les diff\u00e9rentes propri\u00e9t\u00e9s sur lesquelles on peut filtrer.  property  est un tableau associatif, qui est form\u00e9 de la mani\u00e8re suivante :\n    *  key  :  data (Array)  :  key  est le nom du champ tel qu'il l'est en BDD.  data  est un tableau contenant les diff\u00e9rentes configurations pour le champs  key . La configuration diff\u00e8rent selon le type de champ.\nActuellement les diff\u00e9rents champs possible sont :\n * text\n * number\n * autocomplete\n * select\n * date\n * intervalle de date  Pour chacun de ces types, data doit contenir :\n *  id  -  string  : C'est l'id du champs.\n *  label  -  string  : C'est le label du champs.\n *  type  -  string  : C'est le type du champs. Ce type est un de ceux d\u00e9crit ci-dessus.\n *  value  -   : La valeur par d\u00e9faut de ce champ. Peut \u00eatre une cha\u00eene, un nombre, un tableau....\n *  column  -  number  : Le num\u00e9ro de la colonne dans lequel ce champ se trouvera.  Configuration de data suppl\u00e9mentaire pour  data.type == :\n *  text  : AUCUNE.    number  :   min  -  number  -  FACULTATIF  : La valeur minimum possible pour ce champ.  max  -  number  -  FACULTATIF  : La valeur maximal possible pour ce champ.     autocomplete  :   config  -  Array  =====  Se r\u00e9f\u00e9rer \u00e0 la documation concernant le widget \"Autocomplete\".  delete  : La m\u00e9thode qui sera d\u00e9lench\u00e9e lors de la suppression d'un \u00e9lement de l'autocomplete.\n               Cette m\u00e9thode sera appliqu\u00e9e sur  parent_scope  (celui du filtre).  add  : La m\u00e9thode qui sera d\u00e9clench\u00e9e lors de l'ajout d'un \u00e9lement de l'autocomplete.\n            Cette m\u00e9thode sera appliqu\u00e9e sur  parent_scope  (celui du filtre).  data  : Les donn\u00e9es qui seront fournies \u00e0 l'autocomplete.     select  :   propositions  -  Array  - Tableau d'objet qui contient les diff\u00e9rents \u00e9lements \u00e0 ins\u00e9rer dans le select.\n                                 Ce tableau doit correspondre au format suivant : {\u00a0label: 'label', id : 'id'\u00a0}, o\u00f9 id est la value.  default_label  -  string  -  FACULTATIF  : Le label de la proposition par d\u00e9faut.  default_value  -  any     -  FACULTATIF  : La valeur de l'option par d\u00e9faut.     date  : Aucune, par contre  value  doit \u00eatre une date au format  YYYY-MM-DD  !    date-intervale  : Aucune, par contre  value  doit \u00eatre compos\u00e9 comme \u00e7a :   {'min' : '2000-01-01', 'max': '2015-05-05'}  o\u00f9  min  et  max  sont au format  YYYY-MM-DD .", 
            "title": "Filtre"
        }, 
        {
            "location": "/index.html#graph", 
            "text": "A documenter", 
            "title": "Graph"
        }, 
        {
            "location": "/index.html#hierarchie-list", 
            "text": "Ce widget permet de faire une hierarchisation d'\u00e9l\u00e9ments en plusieurs volets qui s'ouvrent l'un \u00e0 c\u00f4t\u00e9 de l'autre.  Utilisation:  hierarchie-list #treeview [datas]=\"current_topics\" [params]=\"params\"  /hierarchie-list    datas  sont les donn\u00e9es \u00e0 mettre en forme dans le widget  params  sert \u00e0 configurer l'arbre :  name_column : le nom de l'attribut qui sera affich\u00e9  primary_key : l'attribut servant d'identifiant  root_id : l'identifiant de l'\u00e9l\u00e9ment servant de racine \u00e0 l'arbre  scope : Le contexte d'appel pour les fonctions utilis\u00e9es dans les boutons et checkboxes  buttons : un tableau de boutons affich\u00e9s pour chaque \u00e9l\u00e9ment de l'arbre  class : Les classes \u00e0 affecter au bouton  text : Le texte (ou html) qui sera affich\u00e9 dans le bouton  action : L'action \u00e0 effectuer au clic sur le bouton", 
            "title": "Hierarchie List"
        }, 
        {
            "location": "/index.html#loader", 
            "text": "Le widget loader permet de cacher facilement le contenu d'un bloc durant son chargement    condition  : condition d'affichage de la roue de chargement, quand la condition est vrai on affiche le ng-content,mais tant que la condition est false on affiche le loader  type  : Facultatif, Type de template d'affichage pour le widget, de base est une div, mais peut etre de type  list  ou  panel   Exemple:  loader [condition]=\"!ready\" [type]=\"'panel'\" \n  Mon Contenu /loader", 
            "title": "Loader"
        }, 
        {
            "location": "/index.html#menu-interne", 
            "text": "Ce widget permet d'ajouter un second niveau de navigation, \u00e0 l'int\u00e9rieur d'un widge de page.   Il se d\u00e9finit en lui fournissant au moins une liste d'item, exemple:      import {MenuItem, MenuItemBadge} from  sdv-ng2-widgets ;\n    ...\n    private menu_items = [\n      new MenuItem({\n        icon:  inbox ,\n        title:  Inbox ,\n        badge: new MenuItemBadge({\n          class:  success ,\n          number: 19\n        })\n      }),\n      new MenuItem({\n        icon:  star ,\n        title:  Starred ,\n        badge: new MenuItemBadge({\n          class:  warning ,\n          number: 2\n        })\n      }),\n      new MenuItem({\n        icon:  star ,\n        title:  More ,\n        subitems: [\n          new MenuItem({\n            title:  Spam ,\n            badge: new MenuItemBadge({\n              class:  warning ,\n              number: 2\n            })\n          }),\n          new MenuItem({\n            title:  Trash \n          })\n        ]\n      })\n    ];  et dans la template:       menu_interne\n      [items]= menu_items \n      [title]= 'Gestion Multi-M\u00e9dia' \n      (select)= menuClick($event) \n      [icon]= 'plus' \n      [tooltip]= 'Exporter vers un media' \n      (button)= newMedia($event) \n      (toggle)= menuToggle($event) \n     /menu_interne    [items] :  Array  - Une entr\u00e9e du tableau correspond \u00e0 un element de la liste, on peut y ajouter des 'subitems' pour un niveau suppl\u00e9mentaire  [title] :  string  - Titre du menu  (select) :  EventEmitter  - renvoie l'item selectionn\u00e9 lors d'un clic  [icon] :  string  - classe d'ic\u00f4ne du bouton de droite  [tooltip] :  string  - texte au survol du bouton de droite  (button) :  EventEmitter  - renvoie true lors d'un click sur le bouton de droite  (toggle) :  EventEmitter  - renvoie l'\u00e9tat (true= ouvert, false= ferm\u00e9) du menu lorsqu'on le ferme/ouvre", 
            "title": "Menu interne"
        }, 
        {
            "location": "/index.html#pager", 
            "text": "Utilisation: pager [pager]=\"pager\" /pager   pager : L'objet contenant la configuration du pager a appel\u00e9 en utilisant le constructeur du Pager  scope : Le contexte d'appel du pager  quantity : Le nombre d'\u00e9l\u00e9ments total  per_page : Le nombre d'\u00e9l\u00e9ments par page  delta : Le nombre de boutons de num\u00e9ros de page affich\u00e9s  actionCallback : La fonction \u00e0 appeler au clic sur  un des boutons du pager", 
            "title": "Pager"
        }, 
        {
            "location": "/index.html#pagination", 
            "text": "La pagination permet de g\u00e9n\u00e9rer une pagination.\n *  item_per_page  -  number  -  default = 10  : Le nombre d'\u00e9lement que l'on veut afficher sur chaque page.\n *  page  -  number  -  default = 1  : La page courante.\n *  max_page  -  number  -  default = 1  : Le nombre de page qu'il y a en tous.\n *  callback  : La fonction \u00e0 appeller en cas de changement de page, cette fonction sera appell\u00e9e sur  parent_scope .\n *  parent_scope  : L'\u00e9lement sur lequel la fonction  callback  va s'appliquer.\n *  delta  -  number  -  default = 5  : Le nombre de page pr\u00e9c\u00e9dent et suivant  page  que l'on vera \u00e0 l'\u00e9cran.   Exemple d'appel dans un template :  pagination [max_page]=\"max_page\"\n            [item_per_page]=\"item_per_page\"\n            [page]=\"page\"\n            [delta]=\"delta\"\n            [parent_scope]=\"scope\"\n            [callback]=\"callback\"  /pagination", 
            "title": "Pagination"
        }, 
        {
            "location": "/index.html#progress-bar", 
            "text": "Permet d'afficher facilement une barre de progression qui change de couleur en fonction du taux d'avancement  Utilisation:     progress-bar [datas]=\"{\n        value : article.avancement,\n        min_value : 0,\n        max_value : 100\n    }\" [class]=\"'progress-bar-striped'\" class=\"col-md-8 control-label\" /progress-bar    datas : Un objet comprenant la valeur de la progress-bar, ainsi que ses valeurs minimum et maximum  class : Des classes particuli\u00e8res \u00e0 ajouter \u00e0 la progress-bar", 
            "title": "Progress Bar"
        }, 
        {
            "location": "/index.html#status-bar", 
            "text": "Permet de faire une notification de status ressemblant \u00e0 growl   Utilisation :  status-bar [icon]=\"'refresh'\"   Mise \u00e0 jour disponible  /status-bar  status-bar [icon]=\"'folder-open-o'\" [class]=\"'info'\"   Mise \u00e0 jour disponible  /status-bar  status-bar [icon]=\"'warning'\" [class]=\"'warning'\"   Mise \u00e0 jour importante disponible  /status-bar  status-bar [icon]=\"'warning'\" [class]=\"'danger'\"   Mise \u00e0 jour critique disponible  /status-bar", 
            "title": "Status Bar"
        }, 
        {
            "location": "/index.html#switch", 
            "text": "A documenter", 
            "title": "Switch"
        }, 
        {
            "location": "/index.html#tabpane-onglets", 
            "text": "Le composant doit figurer dans le template  de la fa\u00e7on suivante :    tabpane \n      tab [tabtitle]=\"...\" \n        mon-autre-component /mon-autre-component \n      /tab \n      tab [tabtitle]=\"...\" \n       code html\n      /tab \n  /tabpane    tabpane  sert \u00e0 encadrer la liste des onglets qui seront regroup\u00e9s  tab  sert \u00e0 d\u00e9finir un onglet en particulier  [tabtitle]  est le titre que portera l'onglet  Chaque balise tab peut contenir du html ou des composants Angular", 
            "title": "TabPane ( Onglets )"
        }, 
        {
            "location": "/index.html#touch-button", 
            "text": "Permet de cr\u00e9er un bouton flottant de style \"polymere\", contenant plusieurs autres boutons   Utilisation:", 
            "title": "Touch Button"
        }, 
        {
            "location": "/index.html#treeview", 
            "text": "Le treeview permet d'avoir un vue hierarchique d'\u00e9lement sous forme d'arbre d\u00e9pliable.  Utilisation: treeview [datas]=\"menu\" [params]=\"params\" /treeview   datas  sont les donn\u00e9es \u00e0 mettre en forme dans l'arbre  params  sert \u00e0 configurer l'arbre :  name_column : le nom de l'attribut qui sera affich\u00e9  primary_key : l'attribut servant d'identifiant  root_id : l'identifiant de l'\u00e9l\u00e9ment servant de racine \u00e0 l'arbre  scope : Le contexte d'appel pour les fonctions utilis\u00e9es dans les boutons et checkboxes  buttons : un tableau de boutons affich\u00e9s pour chaque \u00e9l\u00e9ment de l'arbre  checkbox : un objet permettant de configurer une checkbox devant chaque \u00e9l\u00e9ment de l'arbre :  column_value : La valeur utilis\u00e9e pour la checkbox  checked : un liste d'identifiant d'\u00e9l\u00e9ments d\u00e9j\u00e0 coch\u00e9s  action_on_change : une fonction \u00e0 appeler quand on coche ou d\u00e9coche une checkbox  action_validate : une fonction \u00e0 appeler quand on valide les cases coch\u00e9es", 
            "title": "Treeview"
        }, 
        {
            "location": "/index.html#wizard", 
            "text": "a documenter", 
            "title": "Wizard"
        }
    ]
}